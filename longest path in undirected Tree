import java.util.*;

class Solution {
    public int solution(int[] A, int[] E) {
        // write your code in Java SE 
        int maximum = 0, currentCount;
        int alength = A.length;
        
        for(int i=0; i < alength; i++)
        {
            Set<Integer> visited= new HashSet<Integer>();
            currentCount = getCount(E, A, i+1, A[i],visited);
            if(currentCount > maximum){
                maximum = currentCount;
            }
        }
        
        return maximum;
    }
    
    public int getCount(int[] E, int[] A, int i, int k, Set<Integer> visited){
        int count = 0;
        int maxLevel = 0;
        int elength = E.length / 2;
        visited.add(i);
        for( int j=0; j < elength; j++)
        {
            if((i == E[2*(j)+1] && A[E[(2*j)]-1]==k) || (i == E[2 *(j)] && A[E[(2 * j)+1]-1] ==k)){
                int nextI=0;
                if(i == E[2 * (j)+1]){
                    nextI=E[ 2* (j)];
                }else
                    nextI=E[ 2 * (j)+1];
                if(!visited.contains(nextI)){
                    count=1;
                    int currlevel=0;
                    currlevel = getCount( E, A,nextI, k, visited);
                    if (currlevel>maxLevel)
                        maxLevel=currlevel;
                }
            }
        }
        count+=maxLevel;
        return count;
    }
}
